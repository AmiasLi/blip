{"0": {
    "doc": "API",
    "title": "API",
    "content": " ",
    "url": "/v1.0/api",
    "relUrl": "/v1.0/api"
  },"1": {
    "doc": "AWS",
    "title": "AWS",
    "content": "Blip has built-in supprot for Amazon RDS for MySQL and Amazon Aurora. It supports fetching the MySQL password from AWS Secrets Manager and using IAM authentication tokens. IAM Authentication . CREATE USER 'blip' IDENTIFIED WITH AWSAuthenticationPlugin as 'RDS'; GRANT ALL PRIVILEGES ON `blip`.* TO 'blip'@'%' REQUIRE SSL; GRANT SELECT ON `performance_schema`.* TO 'blip'@'%' REQUIRE SSL; . ",
    "url": "/v1.0/cloud/aws.html",
    "relUrl": "/v1.0/cloud/aws.html"
  },"2": {
    "doc": "Blip",
    "title": "Blip",
    "content": " ",
    "url": "/v1.0/config/blip.html",
    "relUrl": "/v1.0/config/blip.html"
  },"3": {
    "doc": "Blip",
    "title": "Zero Config",
    "content": "Blip uses built-it defaults and auto-detection to run and work without specifing any configuration. This is called the “zero config”. The zero config should work on your laptop (presuming a standard MySQL setup), but it is not intended for real production environments. At the very least, you will need to specify which MySQL instances to monitor in the monitors section of the Blip config file. ",
    "url": "/v1.0/config/blip.html#zero-config",
    "relUrl": "/v1.0/config/blip.html#zero-config"
  },"4": {
    "doc": "Blip",
    "title": "Specifying a Config File",
    "content": "Blip configuration is specified in a single YAML file. There are 3 ways to specify the Blip config file. By default, Blip uses blip.yaml in the current working directory: . $ blip . You can specify a config file with the --config command-line option: . $ blip --config FILE . Or, you can specify a config file with the BLIP_CONFIG environment variable: . $ export BLIP_CONFIG=FILE $ blip . The command-line option takes precedent over the environment variable. In the following example, Blip uses only FILE_2: . $ export BLIP_CONFIG=FILE_1 $ blip --config FILE_2 . ",
    "url": "/v1.0/config/blip.html#specifying-a-config-file",
    "relUrl": "/v1.0/config/blip.html#specifying-a-config-file"
  },"5": {
    "doc": "Blip",
    "title": "Command Line Options",
    "content": "Run blip --help to list command line options. --config FILE . Default: blip.yaml Env var: BLIP_CONFIG . Specify Blip configuruation file. --debug . Env var: BLIP_CONFIG . Print debug to stderr. --help . Print help and exit. --plans FILE[,FILE...] . Env var: BLIP_PLANS . Specify plan files. --print-config . Print config. --print-monitors . Print monitors. --print-plans . Print level plans. --run . Default: true Env var: BLIP_RUN . Run Blip and all monitors. If --run=false, Blip starts and loads everything, but exists before running monitors. --strict . Env var: BLIP_STRICT . Enable strict mode. --version . Print version and exit. ",
    "url": "/v1.0/config/blip.html#command-line-options",
    "relUrl": "/v1.0/config/blip.html#command-line-options"
  },"6": {
    "doc": "Cloud",
    "title": "Cloud",
    "content": " ",
    "url": "/v1.0/cloud",
    "relUrl": "/v1.0/cloud"
  },"7": {
    "doc": "Collectors",
    "title": "Metric Collectors",
    "content": "Syntax… . ",
    "url": "/v1.0/metrics/collectors.html#metric-collectors",
    "relUrl": "/v1.0/metrics/collectors.html#metric-collectors"
  },"8": {
    "doc": "Collectors",
    "title": "Collectors",
    "content": " ",
    "url": "/v1.0/metrics/collectors.html",
    "relUrl": "/v1.0/metrics/collectors.html"
  },"9": {
    "doc": "Blip",
    "title": "Blip",
    "content": "In the simplest setup, a single Blip instance monitors (collect metrics from) a single MySQL instance: . But a single instnace of Blip—a single running blip binary—can monitor any number of MySQL instances: . In Blip lingo (and source code), a monitor collects metrics from a single instance of MySQL, as shown above. In short, “a monitor monitors MySQL.” . Monitors are the central concept in Blip, so let’s zoom in on one monitor to see what makes it ticks: . A monitor has more parts than shown above, but three parts are most important: . Sinks Sinks send metrics to some graphing system. A monitor can send metrics to more than one sink. Blip has built-in sinks for SignalFx and Chronosphere, and it’s easy to write your own sink, which means Blip can send metrics anywhere. Plan A plan determines which metrics to collect. Blip has a default plan that collects more than 60 of the most important MySQL metrics. Plans can be customized. Engine The engine is the core part of a monitor that collects metrics from MySQL (according to the plan). There are many more parts to a monitor, but sinks and plans are the two you are most likely to customize—more on this later. You can’t customize the engine, but you can customize the plan that determines which metrics the engine collects. Let’s zoom in on the engine: . Inside the engine, another part called a metrics collector (or collector for short) collects metrics for one domain: a logical group of MySQL metrics. Above, the engine has four collectors that correspond to four domains: . | Domain | Logical Group | . | status.global | SHOW GLOBAL STATUS | . | var.global | SHOW GLOBAL VARIABLES | . | repl | SHOW REPLICA STATUS, … | . | aws | CloudWatch Metrics | . First, you might notice that a collector is not required required to collect metrics from MySQL. An AWS collector, for example, collects related MySQL metrics from Amazon CloudWatch. But most collectors collect metrics from various outputs of MySQL. Second, why a new abstraction—why “domains”? Because MySQL metrics are unorganized, and some metrics can be obtained from multiple outpus. For example, you can obtain the global system variable max_connections from three different outputs (or commands): . | SHOW GLOBAL VARIABLES LIKE 'max_connections'; | SELECT @@GLOBAL.max_connections; | SELECT * FROM global_variables WHERE variable_name='max_connections'; | . That’s a trivial exmaple. Metric domains become important—practically necessary—when you account for the MySQL Performance Schema (and sometimes the MySQL sys Schema), various command and output changes from MySQL 5.6 to 5.7 to 8.0, subtle differences between distributions (Oracle vs. Percona vs. MariaDB), and cloud providers (like Amazon RDS). Metric domains simplify how metrics are collected. As a user, you shouldn’t care how metrics are collected; you should only care which metrics are collected. Domains and plans make that possible… . A level plan (or plan for short) configures which metrics to collect—by domain. Here’s a snippet of a plan that collects two metrics every 5 seconds: . key-perf-indicators: freq: 5s collect: status.global: metrics: - Queries - Threads_running . First of all, don’t worry: Blip has a built-in plan that collects every common and important MySQL metric, including meta-metrics like database and table sizes. You never have to specify a plan, but chances are that you’ll eventually write your own custom plans, espcially when you learn what other Blip features plans make possible. In the plan snippet above (which is YAML syntax), there is a single level called key-perf-indicators collected every 5 seconds (more on levels in a moment). At this level, Blip collects everything configured under collect:, which is just two metrics in the status.global domain: Queries and Threads_running. Real plans a much larger, listing tens (or hunrdeds) of metrics from various domains. Now the quesiton burning in your mind: what are “levels”? A level is a group of metrics collected at a unique frequency. key-perf-indicators metrics are collected every 5 seconds: 5s, 10s, 15s, and so forth. That’s not very fancy! Every metrics collector collects metrics at some frequency. But consider this: . key-perf-indicators: freq: 5s collect: status.global: metrics: - Queries - Threads_running database-sizes: freq: 60s collect: size.data: options: exclude: test_db,dba_stuff metrics: # Automatic . Now the plan has two levels: the original key-perf-indicators plus database-sizes every 60 seconds. (The domain size.data “collects” [calculatues] data size metrics for databases and tables.) Blip combines levels automatically: at 55 seconds, Blip collects only key-perf-indicators metrics; but at 60 seconds, it collects key-perf-indicators metrics and database-sizes metrics. In technical terms, it collects every level where freq % T == 0, where T is the number of seconds elapsed. Now that’s fancy: with level plans, Blip collects different metrics at different frequencies. Levels aren’t just fancy, they’re more efficient and (potentially) less expensive. For example, calculating table sizes when there are thousands of tables can be relatively slow. Consequently, it’s neither wise nor necessary to collect them every few seconds like regular metrics. By relegating table size collection to a slower frequency, regular metrics collection remains fast and efficient. And if you pay for a hosted metrics graphhing solution, then table size metrics every few seconds is a waste of money (because table sizes don’t usually change that fast). Speaking of paying for a hosted metrics graphhing solution, you need to send the metrics somewhere, and anywhere is possible with pluggable metric sinks (or sinks for short). Blip has built-in sinks for SignalFx and Chronosphere, but the sink is an interface, which means its trivial to write a new sink for wherever you send your metrics. Even better: domains make it possible to programmatically transform and rename metrics from Blip to any data format or protocol because Blip metrics have a consistent naming schema: lowercase domain.metric For example, status.global.threads_running. Your sink might strip the domain prefix, or rename it. It could also add labels, dimensions, and so forth—there are no limits. After collecting metrics specified by the plan, Blip passes them (in a simple data structure) to each sink, which are free to do anything (or nothing) with the metrics. Keep learning: Sinks ↓ . ",
    "url": "/v1.0/intro/concepts.html",
    "relUrl": "/v1.0/intro/concepts.html"
  },"10": {
    "doc": "Config File",
    "title": "Config File",
    "content": "Blip configuration is specified in a single YAML file (see Specifying a Config File). Concetpually, the Blip config file has three parts as shown and defined below. --- # Server config # Monitor defaults # Monitors monitors: [] . Server config Top-level sections that configure the blip instance, which is called the “server”: API, monitor loading, and so forth Monitor defaults Top-level sections that provide default values for each monitor: hostname, username, and so on Monitors List items under the monitors section, one for each MySQL instance to monitor: hostname, username, and so on A simple Blip config file for monitoring a single MySQL instance looks like: . monitors: - hostname: db.local username: metrics password: \"myVerySecurePassword\" . Since no server config is specified, blip uses built-in defaults (see Zero Config), which is probably fine for the server. { config.go } . ",
    "url": "/v1.0/config/config-file.html#config-file",
    "relUrl": "/v1.0/config/config-file.html#config-file"
  },"11": {
    "doc": "Config File",
    "title": "Conventions",
    "content": "To reference sections, subsections, and specific user-configurable variables within those sections: . SECTION Any top-level section. For example: api, plans, and monitors. SECTION[.SUB...].VAR A user-configurable variable in the SECTION with optional subections (SUB). For example: mysql.username (section = mysql, variable = username), or monitors.heartbeat.freq (section = ‘monitors’, subsection = ‘heartbeat’, variable = ‘freq`). Note the difference between heartbeat and monitors.heartbeat: the former is the top-level monitor default; the latter is a monitor config that inherts the monitor defaults, if any. Outside this section of the docs, we prefix all config references with config.. For example, elsewhere in the docs, we write config.api to make it clear that we’re refering to the api section of the Blip config file. All section and variable names are lowercase-and-hyphenated. (But string values that you specifiy can by anything you want.) . disable and disable-auto-... are used to disable features. There are no “enable” prefixes or variables. Instead, some features of either off or auto by default. If off by default, the feature is enabled by specifying a variable noted in the docs. For example, heartbeat is off by default and enabled when heartbeat.freq is specififed. If auto by default, the feature is disabled by specifying disable-auto-FEATURE: true, where FEATURE is the feature name. For example, aws-rds.disable-auto-region: true to disable auto-detecting the AWS region. ",
    "url": "/v1.0/config/config-file.html#conventions",
    "relUrl": "/v1.0/config/config-file.html#conventions"
  },"12": {
    "doc": "Config File",
    "title": "Interpolation",
    "content": "Blip automatically interploates environment variables and monitor variables in the config file and plans. Environment variable ${FOO} Environment variable with default value ${FOO:-default} Monitor variable %{monitor.VAR} NOTE: ${} and %{} are always required. Environment variable interpolation is a simple implementation of the shell standard. In Blip, only the two cases shown above are supported, and default must be a literal value (it cannot be another ${}). Monitor variables are scoped to (only work within) a single monitor. For example: . monitors: - hostname: db.local username: metrics tags: hostname: %{monitor.hostname} . The result is monitors.tags.hostname = \"db.local\" because %{monitor.hostname} refers to the local monitors.hostname variable. Blip is remarkably flexible, so this works the other way, too: . monitors: - hostname: %{monitor.tags.hostname} username: metrics tags: hostname: db.local . The result is monitors.hostname = \"db.local\" because %{monitor.tags.hostname} refers to the local monitrs.tags.hostname variable. Singular “monitor” in %{monitor.VAR}, not plural, to emphasize that the reference is only to the single monitor in which it appears . %{monitor.VAR} references outside monitors or monitor defaults are ignored and reuslt in the literal string: “%{monitor.VAR}”. You can use both in a single value, like: . tls: ca: \"${SECRETS_DIR}/%{monitor.hostname}\" monitors: - hostname: db1 - hostname: db2 . Top-level tls.ca specifies a monitor default that applies to all monitors that don’t explicily set the varaible. If SECRETS_DIR = /secrets, the result is: . monitors: - hostname: db1 tls: ca: /secrets/db1 - hostname: db2 tls: ca: /secrets/db2 . ",
    "url": "/v1.0/config/config-file.html#interpolation",
    "relUrl": "/v1.0/config/config-file.html#interpolation"
  },"13": {
    "doc": "Config File",
    "title": "Server Config",
    "content": " ",
    "url": "/v1.0/config/config-file.html#server-config",
    "relUrl": "/v1.0/config/config-file.html#server-config"
  },"14": {
    "doc": "Config File",
    "title": "api",
    "content": "The api section configures the Blip API. api: bind: \"127.0.0.1:9070\" disable: false . bind . | Type | string | . | Valid values | addr:port, :port | . | Default value | 127.0.0.1:9070 | . The bind variable sets the interface address and port that the API listens on. disable . | Type | bool | . | Valid values | true, false | . | Default value | false | . The disable variable disables the Blip API. ",
    "url": "/v1.0/config/config-file.html#api",
    "relUrl": "/v1.0/config/config-file.html#api"
  },"15": {
    "doc": "Config File",
    "title": "monitor-loader",
    "content": "The monitor-loader section configures how Blip finds and loads MySQL instances. monitor-loader: freq: \"\" files: [] stop-loss: \"\" aws: regions: [] local: disable-auto: false disable-auto-root: false . freq . | Type | string | . | Valid values | Go duration string | . | Default value |   | . The freq variable enables automatic monitor reloading. It’s off by default, which means moniitors are loaded only once at startup. files . | Type | list of strings | . | Valid values | file names | . | Default value |   | . The files variable specifies YAML files to load monitors from. Each file must have a monitors section. stop-loss . | Type | string | . | Valid values | • “N%” (percentage) where N is an integer btween 0 and 100 (exclusive)• “N” where N is an integer greater than 0 | . | Default value |   | . The stop-loss variable enables the stop-lost feature. aws . regions . | Type | list of strings | . | Valid values | AWS region names | . | Default value |   | . The regions variable sets which AWS regions to query for RDS intances. local . The local subsection has only two variables: . disable-auto: true disable-auto-root: true . ",
    "url": "/v1.0/config/config-file.html#monitor-loader",
    "relUrl": "/v1.0/config/config-file.html#monitor-loader"
  },"16": {
    "doc": "Config File",
    "title": "strict",
    "content": "| Type | bool | . | Valid values | true, false | . | Default value | false | . The strict variable enables strict mode, which is disabled by default. In strict mode, Blip returns certains errors rather than ignoring them. ",
    "url": "/v1.0/config/config-file.html#strict",
    "relUrl": "/v1.0/config/config-file.html#strict"
  },"17": {
    "doc": "Config File",
    "title": "Monitor Defaults",
    "content": "Monitor defaults are top-level sections that set default values for monitors that do not set an explicit value. Monitor defaults are useful when you have several MySQL instances to monitor and the configuration only differs by basic connection parameters, like hostname or socket. For example, imagine that you have 10 monitors all with the same username and password. Instead of setting username and password in all 10 monitors, you can set these variables once in the top-level mysql section: . mysql: username: \"defaultUser\" password: \"defaultPass\" monitors: - hostname: db1 # ... - hostname: db10 . The default username and password are applied to the 10 monitors because none of them explicitly set these variables. If a monitor explicitly sets one of the variables, then its explicit value is used instead of the default value. Monitor defaults are convenient, but explicit monitor configuraiton is more clear, so use monitor defatuls sparingly. The intended use case is for variables that must be consistent for all monitors. For example, if Blip monitors Amazon RDS instances in region us-east-1, then setting monitor default aws-rds.region: \"us-east-1\" makes sense. ",
    "url": "/v1.0/config/config-file.html#monitor-defaults",
    "relUrl": "/v1.0/config/config-file.html#monitor-defaults"
  },"18": {
    "doc": "Config File",
    "title": "aws-rds",
    "content": "The aws-rds section configures Amazon RDS for MySQL. aws-rds: iam-auth-token: false password-secret: \"\" region: \"\" disable-auto-region: false disable-auto-tls: false . iam-auth-token . | Type | bool | . | Valid values | true or false | . | Default value | false | . The iam-auth-token variable enables IAM database authentication. When enabled, IAM authentication is the prefered authentication method . password-secret . | Type | string | . | Valid values | AWS Secrets Manager ARN | . | Default value |   | . The password-secret variables sets the AWS Secrets Manager ARN that contains the MySQL user password. region . | Type | string | . | Valid values |   | . | Default value |   | . The region variable sets the AWS region. disable-auto-region . | Type | string | . | Valid values | true or false | . | Default value | false | . The disable-auto-region variable enables/disables automatic detection of the AWS region. disable-auto-tls . | Type | string | . | Valid values | true or false | . | Default value | false | . The disable-auto-tls variables enables/disables automatic use of the Amazon RDS certifcate authority (CA). By default, Blip uses the 2019 AWS RDS CA, which is built-in (you don’t need to configure anything). See AWS for details. ",
    "url": "/v1.0/config/config-file.html#aws-rds",
    "relUrl": "/v1.0/config/config-file.html#aws-rds"
  },"19": {
    "doc": "Config File",
    "title": "exporter",
    "content": "The exporter section configure Blip to emulate Prometheus mysqld_exporter. exporter: mode: \"\" flags: web.listen-address: \"127.0.0.1:9104\" web.telemetry-path: \"/metrics\" . mode . | Type | string | . | Valid values | dual or legacy | . | Default value |   | . The mode variables enables the Prometheus emualation feature. When set to dual, Blip runs normally and emulates Prometheus. When set to legacy, Blip runs only emulates Prometheus. The feature is disabled by default. flags . | Type | key-value map (string: string) | . | Valid values | (see list below) | . | Default value | (see list below) | . The flag variable is a key-value map of strings for certain Prometheus mysqld_exporter flags: . | web.listen-address (default: 127.0.0.1:9104) | web.telemetry-path (default: /metrics) | . ",
    "url": "/v1.0/config/config-file.html#exporter",
    "relUrl": "/v1.0/config/config-file.html#exporter"
  },"20": {
    "doc": "Config File",
    "title": "heartbeat",
    "content": "The heartbeat section configures the Blip heartbeat feature. heartbeat: freq: \"\" table: blip.heartbeat . freq . | Type | string | . | Valid values | Go duration string | . | Default value |   | . The freq variables sets how frequently heartbeats are written. See Hearbeat for details. table . | Type | string | . | Valid values | valid MySQL table name | . | Default value |   | . The table variables sets the Blip heartbeat table. The default database is blip if the table name is not database-qualified like db.heartbeat. ",
    "url": "/v1.0/config/config-file.html#heartbeat",
    "relUrl": "/v1.0/config/config-file.html#heartbeat"
  },"21": {
    "doc": "Config File",
    "title": "mysql",
    "content": "The mysql section configures how to connect to MySQL. mysql: hostname: \"\" mycnf: \"\" password: \"\" password-file: \"\" socket: \"\" timeout-connect: \"5s\" username: \"blip\" . This is the most important and common seciton since it configures how Blip connects to MySQL. It’s also the only section that becomes top-level in each monitor config: in a monitor config, omit mysql: and configure these variables at the top level. hostname . | Type | string | . | Valid values | hostname or hostname:port | . | Default value |   | . The hostname variable sets the MySQL hostname. mycnf . | Type | string | . | Valid values | my.cnf file name | . | Default value |   | . The mycnf variable sets a my.cnf file to read. Blip reads the [client] section of the my.cnf file: . | my.cnf File | Blip Variable | . | host | hostname | . | password | password | . | port | Appended to hostname | . | socket | socket | . | ssl-ca | tls.ca | . | ssl-cert | tls.cert | . | ssl-key | tls.key | . | user | username | . username . | Type | string | . | Valid values |   | . | Default value |   | . The username variable sets the MySQL username. password . | Type | string | . | Valid values |   | . | Default value |   | . The password variable sets the MySQL password. password-file . | Type | string | . | Valid values |   | . | Default value |   | . The password-file variable sets a file from which Blip reads the MySQL password. socket . | Type | string | . | Valid values |   | . | Default value |   | . The socket variable sets the MySQL socket. timeout-connect . | Type | string | . | Valid values | Go duration string | . | Default value |   | . The timeout-connect variable sets the connection timeout. ",
    "url": "/v1.0/config/config-file.html#mysql",
    "relUrl": "/v1.0/config/config-file.html#mysql"
  },"22": {
    "doc": "Config File",
    "title": "plans",
    "content": "The plans section configures the source of plans. plans: files: [\"plan.yaml\"] table: \"blip.plans\" monitor: {} adjust: # See below . files . | Type | list of strings | . | Valid values | file names | . | Default value | plans.yaml | . The files variable is a list of file names from which to load plans. Blip attempts to load the default, plans.yaml, but it is not required and does not cause an error if the file does not exist. Instead, in this case, Blip uses a default built-in plan. If plan files are explicitly configured, Blip only reads those plan files. monitor . | Type | dictonary | . | Valid values | Monitor | . | Default value |   | . The monitor variable configures the MySQL instance from which the table is loaded. table . | Type | string | . | Valid values | valid MySQL table name | . | Default value |   | . The table variable configures the MySQL table name from which plans are loaded. See . adjust . The adjust subection of the plan section configures the Level Plan Adjuster (LPA) feature. plans: adjust: offline: after: \"\" plan: \"\" standby: after: \"\" plan: \"\" read-only: after: \"\" plan: \"\" active: after: \"\" plan: \"\" . Each of the four sections (corresponding to the four connection states) have the same two variables: . after . | Type | string | . | Valid values | Go duration string | . | Default value |   | . The after variable sets how long before the state takes effect. plan . | Type | string | . | Valid values | plan name | . | Default value |   | . The plan variable sets the plan to load when the state takes effect. ",
    "url": "/v1.0/config/config-file.html#plans",
    "relUrl": "/v1.0/config/config-file.html#plans"
  },"23": {
    "doc": "Config File",
    "title": "sinks",
    "content": "The sinks section configures built-in metrics sinks and custom metrics sinks. This section is a map of maps: . sinks: sinkName1: option1: value1 sinkName2: option1: value1 . Blip has three built-in sinks named log, singalfx, and chronosphere. The options for each are listed below. chronosphere . | Key | Value | Default | . | url | Remote write URL | http://127.0.0.1:3030/openmetrics/write | . log . The Blip built-in log sink has no options. signalfix . | Key | Value | Default | . | auth-token | API authentication token |   | . | auth-token-file | File to read API auth token from |   | . ",
    "url": "/v1.0/config/config-file.html#sinks",
    "relUrl": "/v1.0/config/config-file.html#sinks"
  },"24": {
    "doc": "Config File",
    "title": "tags",
    "content": "The tags section sets user-defined key-value pairs (as strings) that are passed to each sink. For example (using interpolation): . tags: env: ${ENVIRONMENT:-dev} dc: ${DATACENTER:-local} hostname: %{monitor.hostname} . Blip calls these “tags”, but each sink might have a different term for the same concept. For example, with SignalFx these are called “dimensions”. But the concept is the same: metadata (usually string key-value pairs) attached to metrics that describe or annotate the metrics for grouping, aggregation, or filtering when display in graphs/charts. The built-in metrics sinks automatically send all tags with metrics. For example, the signalfx sink sends the tags as SingalFx dimensions. ",
    "url": "/v1.0/config/config-file.html#tags",
    "relUrl": "/v1.0/config/config-file.html#tags"
  },"25": {
    "doc": "Config File",
    "title": "tls",
    "content": "The tls section configures TLS certificates. tls: ca: \"\" cert: \"\" key: \"\" . You can specify only tls.ca, or tls.cert and tls.key, or all three; any other combination is invalid. By default, Blip does not use TLS for MySQL connections except when using AWS; see section aws-rds or AWS. ca . | Type | string | . | Valid values | file name | . | Default value |   | . The ca variables sets the certificate authority file. cert . | Type | string | . | Valid values | file name | . | Default value |   | . The cert variables sets the public certificate file. key . | Type | string | . | Valid values | file name | . | Default value |   | . The key variables sets the private key file. ",
    "url": "/v1.0/config/config-file.html#tls",
    "relUrl": "/v1.0/config/config-file.html#tls"
  },"26": {
    "doc": "Config File",
    "title": "Monitors",
    "content": "The monitors section is a list of MySQL instances to monitor. Each instance is a YAML dictionary containing any of the monitor default sections with one exception: mysql variables are top-level in a monitor. The example below shows two different MySQL instances to monitor. monitors: - hostname: db1.local username: metrics password-file: \"/secret/db-password\" heartbeat: freq: 1s - mycnf: \"/secret/my.cnf\" exporter: mode: legacy . The first MySQL instance is configured in lines 3-7. (Note the single, leading hyphen on line 3 that denotes an item in a YAML list.) The first three variables—hostname, username, and password-file—are mysql variables but in a monitor they are top-level. But all other sections, like heartbeat and its variable freq, are exactly the same in a monitor. The second MySQL instance is configured in lines 9-11. Variable mycnf belongs to section mysql, but again: in a monitor, mysql variables are top-level. Section exporter is exactly the same in a monitor. Refer to Monitor Defaults for configuring MySQL instances, and remember: mysql variables are top-level in a monitor (omit mysql: and include the variables directly). Monitors have two variables that only appear in monitors: id and meta. id . | Type | string | . | Valid values | any string | . | Default value | (automatic) | . The id variable uniquely identifies the MySQL instance in Blip. Every monitor has a unique ID that, by default, Blip sets automatically. You can set monitor IDs manually, but it’s better to let Blip set them automatically to avoid duplicates (which causes a fatal error). Blip uses monitor IDs to track and report each MySQL instance in its own output and API. Blip does not use monitor IDs to identify MySQL instances for reporting metrics, but you can use them if you want. For example: . monitors: - id: db1 hostname: db1.local tags: monitorId: %{monitor.id} . Since tags are passed to sinks (which report metrics), all sinks will receive the monitor ID. (Sinks receive the monitor ID at the code-level too, so technically this example is not necessary.) . Monitor IDs are not garuanteed to be stable—they might change between Blip versions. Therefore, do not rely on them outside of Blip for truly stable, unique MySQL instance identification. meta . | Type | key-value map (string: string) | . | Valid values | any strings | . | Default value |   | . The meta variable is a map of key-value strings extrensic to Blip. “Extrensic to Blip” is a fancy but succinct way of saying that meta data is not used by Blip, but it can be used by you. For example by contrast, all other variables are used by Blip in some way, for some purpose. But not meta. However, you can still reference meta in the config file and plans: %{monitor.meta.KEY}. meta solves at least one problem: passing the source DSN for a replica from monitor config to plan. Imagine you have two MySQL instances: source.db and replica.db, where the latter replicates from the former. Problem is: there is no configuration section to define the source MySQL instance. Configuring replication sources in Blip is not an easy problem to solve because replication topologies change when replicas are used for high availability, and MySQL Group Replication has different requirements. To solve this problem, you configure the source DSN in meta: . monitors: - hostname: replica.db meta: source-host: source.db source-user: repl source-pass: pleaseDontLag . You could configure it in tags, too, but tags are copied to sinks whereas metadata is not. Therefore, this configuration is better placed in meta than tags. Then in the plan, reference the metadata: . replication: freq: 5s collect: repl: options: source-host: %{monitor.meta.source-host} source-user: %{monitor.meta.source-user} source-pass: %{monitor.meta.source-pass} metrics: - lag . ",
    "url": "/v1.0/config/config-file.html#monitors",
    "relUrl": "/v1.0/config/config-file.html#monitors"
  },"27": {
    "doc": "Config File",
    "title": "Config File",
    "content": ". | Config File | Conventions | Interpolation | Server Config . | api . | bind | disable | . | monitor-loader . | freq | files | stop-loss | aws | regions | local | . | strict | . | Monitor Defaults . | aws-rds . | iam-auth-token | password-secret | region | disable-auto-region | disable-auto-tls | . | exporter . | mode | flags | . | heartbeat . | freq | table | . | mysql . | hostname | mycnf | username | password | password-file | socket | timeout-connect | . | plans . | files | monitor | table | adjust . | after | plan | . | . | sinks . | chronosphere | log | signalfix | . | tags | tls . | ca | cert | key | . | . | Monitors . | id | meta | . | . ",
    "url": "/v1.0/config/config-file.html",
    "relUrl": "/v1.0/config/config-file.html"
  },"28": {
    "doc": "Configure",
    "title": "Configure",
    "content": " ",
    "url": "/v1.0/config",
    "relUrl": "/v1.0/config"
  },"29": {
    "doc": "Conventions",
    "title": "Conventions",
    "content": "Blip conventions provide consistency and structure to make writing plans and reporting metrics easier. Although the built-in sinks report fully-qualified metric names (status.global.threads_running), your custom sink can rename and report metrics however you want. For example, your sink could ignore Blip domains completely and report only metric names (threads_running), or report a simpler custom prefix (mysql.threads_running). ",
    "url": "/v1.0/metrics/conventions.html",
    "relUrl": "/v1.0/metrics/conventions.html"
  },"30": {
    "doc": "Conventions",
    "title": "Domain Naming",
    "content": "Blip metric domain names have three requirements: . | Always lowercase | One word: [a-z]+ | Singular noun: “size” not “sizes”; “query” not “queries” | . Common abbreviation and acrynomym are prefered, especially when they match MySQL usage: “thd” not “thread”; “pfs” not “performanceschema”; and so on. Currently, domain names fit this convention, but if a need arises to allow hyphenation (“domain-name”), it might be allowed. Snake case (“domain_name”) and camel case (“domainName”) are not allowed: the former is used by metrics, and the latter is not Blip style. Sub-domains . Blip uses sub-domains for two purposes: MySQL-grouped metrics, or metrics that are related but different. The error domain is an exmaple of metrics that are related by different. error.query and error.repl both comprise error-related metrics, hence the common root domain, but the specific metrics for each are different. Thestatus domain is an exmaple of MySQL-grouped metrics. MySQL provides status metrics grouped by account, global, host, thread, and user. (Global is the most common, as in SHOW GLOBAL STATUS.) Blip has a sub-domain for each group—status.account, status.global, and so on—that makes advacned plans like the following possible: . level: collect: status.global: options: all: yes status.host: options: host: 10.1.1.1 metrics: - queries - threads_running . The plan snippet above collects all global status metrics (status.global) but only two status metrics for host 10.1.1.1 (status.host). MySQL-grouped metrics are an explicit group: status.host explicitly groups by host. See Grouping for more details. For simplicitly, sub-domains are called “domains” in the rest of the docs. The term is only used here to clarify the distinction and usage. ",
    "url": "/v1.0/metrics/conventions.html#domain-naming",
    "relUrl": "/v1.0/metrics/conventions.html#domain-naming"
  },"31": {
    "doc": "Conventions",
    "title": "Metric Naming",
    "content": "Blip strives to report MySQL metric names as-is—no modifications—so that what you see in MySQL is what you get in Blip. However, MySQL metric names are very inconsistent: . | Foo_bar (most common) | Foo_Bar (replica status) | foo_bar (InnoDB metrics) | foo_bar_count (type suffix) | foo_bar_usec (unit suffix) | . For consistency, Blip metric names have three requirements: . | Only snake_case | Always lowercase | No additional suffixes or prefixes | . A fully-qualified metric name includes a domain: status.global.threads_running. The metric name is always the last field (split on .). ",
    "url": "/v1.0/metrics/conventions.html#metric-naming",
    "relUrl": "/v1.0/metrics/conventions.html#metric-naming"
  },"32": {
    "doc": "Conventions",
    "title": "Units",
    "content": "MySQL metrics use a variety of units—from picoseconds to seconds. When the MySQL metric unit is documented and consistent, Blip reports the value as-is. For example, innodb.buffer_flush_avg_time is documented as “Avg time (ms) spent for flushing recently.”, therefore Blip reports the value as-is: as milliseconds. When the MySQL metric unit is variable, Blip uses the following units: . | Metric Type | Unit | . | Query time | milliseconds (ms) | . | Lock time | milliseconds (ms) | . | Wait time | milliseconds (ms) | . | Replication (lag) | milliseconds (ms) | . | Data size | bytes | . For example, query response time can be nanoseconds or seconds with microsecond precision (%.6f). Regardless of the source, Blip reports query.*.response_time as milliseconds with microsecond precision (%.3f). Blip does not suffix metric names with units, and it does not strip the few MySQL metrics that have unit suffixes. ",
    "url": "/v1.0/metrics/conventions.html#units",
    "relUrl": "/v1.0/metrics/conventions.html#units"
  },"33": {
    "doc": "Conventions",
    "title": "Grouping",
    "content": "Certain domains (as documented) implicitly or explicitly group metrics. In both cases, the group key-value pairs are set in the blip.MetricValue.Group map. Groups, labels, and dimensions serve the same purpose. Blip uses the term group because it’s similar to MySQL GROUP BY. Implicit grouping means the metrics collector (for the domain) groups metrics automatically. For example, the size.data collector, which collects database and table sizes, groups metrics by databse name. As a result, each metric has a key-value pair like db=foo. Explicit grouping refers to MySQL-grouped metrics—see Sub-domains. For example, the status.host collector is explicitly grouped by host. Therefore, each metric has a key-value pair like host=10.1.1.1. global is the only exception to explicit grouping: global metrics do not set anything in the blip.MetricValue.Group map (the map is nil). ",
    "url": "/v1.0/metrics/conventions.html#grouping",
    "relUrl": "/v1.0/metrics/conventions.html#grouping"
  },"34": {
    "doc": "Blip",
    "title": "Blip",
    "content": "A running instance of the blip binary is a server. Internally, it’s a singleton instances of a Server data type. ",
    "url": "/v1.0/server/core.html",
    "relUrl": "/v1.0/server/core.html"
  },"35": {
    "doc": "Blip",
    "title": "Startup",
    "content": "Blip boots then runs. Command line option --run=false stop it from running. Monitors . Monitors have indepdent of the server. A monitor can . ",
    "url": "/v1.0/server/core.html#startup",
    "relUrl": "/v1.0/server/core.html#startup"
  },"36": {
    "doc": "Blip",
    "title": "Controls",
    "content": ". | Command line | API | Plan Loader | Monitor Loader | Sighnal handlers | . ",
    "url": "/v1.0/server/core.html#controls",
    "relUrl": "/v1.0/server/core.html#controls"
  },"37": {
    "doc": "Db Maker",
    "title": "Db Maker",
    "content": "The database connection factory—db maker for short—makes connections to MySQL. ",
    "url": "/v1.0/server/db-maker.html",
    "relUrl": "/v1.0/server/db-maker.html"
  },"38": {
    "doc": "Db Maker",
    "title": "Authentication",
    "content": ". | Amazon RDS IAM authentication (config.aws-rds.iam-auth-token) | Amazon Secrets Manager (config.aws-rds.password-secret) | TLS certificate (config.tls) | Password file (config.mysql.password-file) | my.cnf (config.mysql.mycnf) | Password (config.mysql.password) | No password | . Source code: dbconn/factory.go . ",
    "url": "/v1.0/server/db-maker.html#authentication",
    "relUrl": "/v1.0/server/db-maker.html#authentication"
  },"39": {
    "doc": "Db Maker",
    "title": "Password Reloading",
    "content": "Blip automatically reloads the password for all authentication methods. It uses go-mysql/hotswap-dsn-driver. ",
    "url": "/v1.0/server/db-maker.html#password-reloading",
    "relUrl": "/v1.0/server/db-maker.html#password-reloading"
  },"40": {
    "doc": "Default",
    "title": "Default Plan",
    "content": "The default plan . ",
    "url": "/v1.0/plans/default.html#default-plan",
    "relUrl": "/v1.0/plans/default.html#default-plan"
  },"41": {
    "doc": "Default",
    "title": "Blip",
    "content": " ",
    "url": "/v1.0/plans/default.html#blip",
    "relUrl": "/v1.0/plans/default.html#blip"
  },"42": {
    "doc": "Default",
    "title": "Prometheus",
    "content": " ",
    "url": "/v1.0/plans/default.html#prometheus",
    "relUrl": "/v1.0/plans/default.html#prometheus"
  },"43": {
    "doc": "Default",
    "title": "Default",
    "content": " ",
    "url": "/v1.0/plans/default.html",
    "relUrl": "/v1.0/plans/default.html"
  },"44": {
    "doc": "Defaults",
    "title": "Default Metrics",
    "content": "Every 5 seconds: . From status.global: . | com_begin | com_commit | com_delete | com_delete_multi | com_insert | com_insert_select | com_replace | com_replace_select | com_rollback | com_select | com_update | com_update_multi | innodb_buffer_pool_pages_dirty | innodb_buffer_pool_pages_flushed | innodb_buffer_pool_pages_free | innodb_buffer_pool_pages_total | innodb_buffer_pool_read_requests | innodb_buffer_pool_reads | innodb_buffer_pool_wait_free | innodb_data_read | innodb_data_reads | innodb_data_writes | innodb_data_written | innodb_os_log_written | queries | threads_running | . From innodb: . | buffer_LRU_batch_flush_total_pages | buffer_flush_adaptive_total_pages | buffer_flush_background_total_pages | innodb_log_waits | innodb_os_log_pending_writes | lock_deadlocks | lock_row_lock_current_waits | lock_row_lock_time | lock_row_lock_waits | lock_timeouts | log_lsn_checkpoint_age_total | log_max_modified_age_async | trx_active_transactions | trx_rseg_history_len | . From query.global: . | response_time (p999) if MySQL 8.0, Percona Server 5.7, or MariaDB 10.x | . Every 20 seconds: . | aborted_clients | aborted_connects | binlog_cache_disk_use | bytes_received | bytes_sent | com_admin_commands | com_flush | com_kill | com_purge | com_show_processlist | com_show_slave_status | com_show_status | com_show_variables | com_show_warnings | com_stmt_execute | com_stmt_prepare | connections | created_tmp_disk_tables | created_tmp_files | created_tmp_tables | max_used_connections | prepared_stmt_count | select_full_join | select_full_range_join | select_range_check | select_scan | threads_connected | . Every 5 minutes: . | Database sizes (per-db) | Binlog size | . Every 15 minutes: . Sysvars: . | max_connections | max_prepared_stmt_count | innodb_log_file_size | . ",
    "url": "/v1.0/metrics/defaults.html#default-metrics",
    "relUrl": "/v1.0/metrics/defaults.html#default-metrics"
  },"45": {
    "doc": "Defaults",
    "title": "Defaults",
    "content": " ",
    "url": "/v1.0/metrics/defaults.html",
    "relUrl": "/v1.0/metrics/defaults.html"
  },"46": {
    "doc": "Domain Reference",
    "title": "Metric Domains",
    "content": ". | aria | autoinc | aws . | aws.rds | aws.aurora | . | azure | error . | error.global | error.query | error.repl | error.client | . | event . | event.stage | event.stmt | event.trx | event.wait | . | file | gcp | gr | host | innodb . | innodb.mutex | . | mariadb | ndb | oracle | percona | percona.stats | processlist | pfs | pxc | query . | query.global | query.id | . | repl | rocksdb | size . | size.binlog | size.data | size.index | size.file | . | status . | status.account | status.global | status.host | status.thread | status.user | . | thd | tls | tokudb | var.global | . ",
    "url": "/v1.0/metrics/domains.html#metric-domains",
    "relUrl": "/v1.0/metrics/domains.html#metric-domains"
  },"47": {
    "doc": "Domain Reference",
    "title": "aria",
    "content": "MariaDB Aria Storage Engine . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#aria",
    "relUrl": "/v1.0/metrics/domains.html#aria"
  },"48": {
    "doc": "Domain Reference",
    "title": "autoinc",
    "content": "Auto-increment Columns . Dimensions: db, tbl Metrics: cur: .cur dim: db || tbl .max . ",
    "url": "/v1.0/metrics/domains.html#autoinc",
    "relUrl": "/v1.0/metrics/domains.html#autoinc"
  },"49": {
    "doc": "Domain Reference",
    "title": "aws",
    "content": "Amazon Web Services . aws.rds . Amazon RDS for MySQL . aws.aurora . Amazon Aurora . ",
    "url": "/v1.0/metrics/domains.html#aws",
    "relUrl": "/v1.0/metrics/domains.html#aws"
  },"50": {
    "doc": "Domain Reference",
    "title": "azure",
    "content": "Microsoft Azure . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#azure",
    "relUrl": "/v1.0/metrics/domains.html#azure"
  },"51": {
    "doc": "Domain Reference",
    "title": "error",
    "content": "error.global . error.query . error.repl . error.client . ",
    "url": "/v1.0/metrics/domains.html#error",
    "relUrl": "/v1.0/metrics/domains.html#error"
  },"52": {
    "doc": "Domain Reference",
    "title": "event",
    "content": "Reserved for future use. event.stage . event.stmt . event.trx . event.wait . ",
    "url": "/v1.0/metrics/domains.html#event",
    "relUrl": "/v1.0/metrics/domains.html#event"
  },"53": {
    "doc": "Domain Reference",
    "title": "file",
    "content": "Files and Tablespaces . Reserved for future use. ##galera Percona XtraDB Cluster and MariaDB Cluster (wsrep) . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#file",
    "relUrl": "/v1.0/metrics/domains.html#file"
  },"54": {
    "doc": "Domain Reference",
    "title": "gcp",
    "content": "Google Cloud . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#gcp",
    "relUrl": "/v1.0/metrics/domains.html#gcp"
  },"55": {
    "doc": "Domain Reference",
    "title": "gr",
    "content": "Group Replication . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#gr",
    "relUrl": "/v1.0/metrics/domains.html#gr"
  },"56": {
    "doc": "Domain Reference",
    "title": "host",
    "content": "Host (Client) .COUNT_HOST_BLOCKED_ERRORS . ",
    "url": "/v1.0/metrics/domains.html#host",
    "relUrl": "/v1.0/metrics/domains.html#host"
  },"57": {
    "doc": "Domain Reference",
    "title": "innodb",
    "content": "InnoDB . INFORMATION_SCHEMA.INNODB_METRICS .buffer.buffer_flush_adaptive_total_pages .log.log_lsn_checkpoint_age .transaction.trx_rseg_history_len .ahi . innodb.mutex . InnoDB Mutexes . SHOW ENGINE INNODB MUTEX .redo_rseg.waits . ",
    "url": "/v1.0/metrics/domains.html#innodb",
    "relUrl": "/v1.0/metrics/domains.html#innodb"
  },"58": {
    "doc": "Domain Reference",
    "title": "mariadb",
    "content": "MariaDB Enhancements . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#mariadb",
    "relUrl": "/v1.0/metrics/domains.html#mariadb"
  },"59": {
    "doc": "Domain Reference",
    "title": "ndb",
    "content": "MySQL NDB Cluster . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#ndb",
    "relUrl": "/v1.0/metrics/domains.html#ndb"
  },"60": {
    "doc": "Domain Reference",
    "title": "oracle",
    "content": "Oracle Cloud and Enterprise Enhancements . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#oracle",
    "relUrl": "/v1.0/metrics/domains.html#oracle"
  },"61": {
    "doc": "Domain Reference",
    "title": "percona",
    "content": "Percona Server Enhancements . ",
    "url": "/v1.0/metrics/domains.html#percona",
    "relUrl": "/v1.0/metrics/domains.html#percona"
  },"62": {
    "doc": "Domain Reference",
    "title": "percona.stats",
    "content": "User Statistics .percona.stats.client .percona.stats.idx .percona.stats.tbl .percona.stats.thd .percona.stats.user . ",
    "url": "/v1.0/metrics/domains.html#perconastats",
    "relUrl": "/v1.0/metrics/domains.html#perconastats"
  },"63": {
    "doc": "Domain Reference",
    "title": "processlist",
    "content": "Processlist . SHOW PROCESSLIST; — or — I_S.PROCESSLIST; . ",
    "url": "/v1.0/metrics/domains.html#processlist",
    "relUrl": "/v1.0/metrics/domains.html#processlist"
  },"64": {
    "doc": "Domain Reference",
    "title": "pfs",
    "content": "Performance Schema . SHOW ENGINE PERFORMANCE_SCHEMA STATUS; . ",
    "url": "/v1.0/metrics/domains.html#pfs",
    "relUrl": "/v1.0/metrics/domains.html#pfs"
  },"65": {
    "doc": "Domain Reference",
    "title": "pxc",
    "content": "Percona XtraDB Cluster . Reserved: use galera. ",
    "url": "/v1.0/metrics/domains.html#pxc",
    "relUrl": "/v1.0/metrics/domains.html#pxc"
  },"66": {
    "doc": "Domain Reference",
    "title": "query",
    "content": ".response_time {p999} . query.global . query.id . {id=&lt;SHA&gt;} . ",
    "url": "/v1.0/metrics/domains.html#query",
    "relUrl": "/v1.0/metrics/domains.html#query"
  },"67": {
    "doc": "Domain Reference",
    "title": "repl",
    "content": "Replication .running .lag-ms Lag in milliseconds . ",
    "url": "/v1.0/metrics/domains.html#repl",
    "relUrl": "/v1.0/metrics/domains.html#repl"
  },"68": {
    "doc": "Domain Reference",
    "title": "rocksdb",
    "content": "RocksDB Store Engine . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#rocksdb",
    "relUrl": "/v1.0/metrics/domains.html#rocksdb"
  },"69": {
    "doc": "Domain Reference",
    "title": "size",
    "content": "Storage Size (Bytes) . size.binlog . Binary Log Storage Size . size.data . Database and Table Storage Size . size.index . Index Storage Size . size.file . File Storage Size .innodb_undo .innodb_temp . ",
    "url": "/v1.0/metrics/domains.html#size",
    "relUrl": "/v1.0/metrics/domains.html#size"
  },"70": {
    "doc": "Domain Reference",
    "title": "status",
    "content": "MySQL Server Status . status.account . Status by Account . Reserved for future use. status.global . SHOW GLOBAL STATUS — or — P_S.GLOBAL_STATUS .com_select .threads_running .innodb_log_waits .queries . status.host . Status by Host (Client) . Reserved for future use. status.thread . Status by Thread . Reserved for future use. status.user . Status by User . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#status",
    "relUrl": "/v1.0/metrics/domains.html#status"
  },"71": {
    "doc": "Domain Reference",
    "title": "thd",
    "content": "Threads . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#thd",
    "relUrl": "/v1.0/metrics/domains.html#thd"
  },"72": {
    "doc": "Domain Reference",
    "title": "tls",
    "content": "TLS (SSL) Status and Configuration . enabled (have_ssl) ssl_server_not_before (date-time converted to Unix timestamp) ssl_server_not_after (date-time converted to Unix timestamp) current_tls_version . ",
    "url": "/v1.0/metrics/domains.html#tls",
    "relUrl": "/v1.0/metrics/domains.html#tls"
  },"73": {
    "doc": "Domain Reference",
    "title": "tokudb",
    "content": "TokuDB Storage Engine . Reserved for future use. ",
    "url": "/v1.0/metrics/domains.html#tokudb",
    "relUrl": "/v1.0/metrics/domains.html#tokudb"
  },"74": {
    "doc": "Domain Reference",
    "title": "var.global",
    "content": "MySQL System Variables . SELECT @@GLOBAL.var — SHOW GLOBAL VARIABLES — P_S.GLOBAL_VARIABLES innodb_log_file_size max_connections sync_binlog . ",
    "url": "/v1.0/metrics/domains.html#varglobal",
    "relUrl": "/v1.0/metrics/domains.html#varglobal"
  },"75": {
    "doc": "Domain Reference",
    "title": "Domain Reference",
    "content": " ",
    "url": "/v1.0/metrics/domains.html",
    "relUrl": "/v1.0/metrics/domains.html"
  },"76": {
    "doc": "Engine",
    "title": "Engine",
    "content": " ",
    "url": "/v1.0/monitor/engine.html",
    "relUrl": "/v1.0/monitor/engine.html"
  },"77": {
    "doc": "File",
    "title": "Plan File",
    "content": " ",
    "url": "/v1.0/plans/file.html#plan-file",
    "relUrl": "/v1.0/plans/file.html#plan-file"
  },"78": {
    "doc": "File",
    "title": "Interpolation",
    "content": "Interpolation in plan files is idential to interpolation in the config file (see Config File &gt; Interpolation). Environment variable ${FOO} Environment variable with default value ${FOO:-default} Monitor variable %{monitor.VAR} NOTE: ${} and %{} are always required. ",
    "url": "/v1.0/plans/file.html#interpolation",
    "relUrl": "/v1.0/plans/file.html#interpolation"
  },"79": {
    "doc": "File",
    "title": "Syntax",
    "content": " ",
    "url": "/v1.0/plans/file.html#syntax",
    "relUrl": "/v1.0/plans/file.html#syntax"
  },"80": {
    "doc": "File",
    "title": "File",
    "content": " ",
    "url": "/v1.0/plans/file.html",
    "relUrl": "/v1.0/plans/file.html"
  },"81": {
    "doc": "Heartbeat",
    "title": "Heartbeat",
    "content": "Blip has a built-in heartbeat feature for measuring replication lag. ",
    "url": "/v1.0/heartbeat",
    "relUrl": "/v1.0/heartbeat"
  },"82": {
    "doc": "Home",
    "title": "GitHub Repo",
    "content": "https://github.com/cashapp/blip . Official releases are tagged with version. Only the latest version is stable and supported. ",
    "url": "/#github-repo",
    "relUrl": "/#github-repo"
  },"83": {
    "doc": "Home",
    "title": "Support",
    "content": "For bugs and general issues, please create a new GitHub issue. If submitting code changes, please also see the contributing guide. ",
    "url": "/#support",
    "relUrl": "/#support"
  },"84": {
    "doc": "Home",
    "title": "Release Notes",
    "content": ". | Release Notes | . ",
    "url": "/#release-notes",
    "relUrl": "/#release-notes"
  },"85": {
    "doc": "Home",
    "title": "Home",
    "content": ". Blip is the most advanced MySQL metrics collector ever built. | Connects to MySQL anywhere—local, remote, bare metal, cloud | Monitors one or many MySQL instances per blip instance | Configurable metrics collection—metrics are not hard-coded | Different metric collection frequencies—collect metrics at different intervals | Built-in support for Amazon RDS include Secrets Manager and IAM authentication | Send metrics to any back end—built-in support for SignalFx and Chronosphere | Plugins and factories to integrate with any environment | . Start by reading the Introduction. Then read the Quick Start to give Blip a try. ",
    "url": "/",
    "relUrl": "/"
  },"86": {
    "doc": "Release Notes",
    "title": "Release Notes",
    "content": " ",
    "url": "/release-notes",
    "relUrl": "/release-notes"
  },"87": {
    "doc": "Release Notes",
    "title": "v1.0",
    "content": "v1.0.0 (not released yet) . | First GA, production-ready release. | . ",
    "url": "/release-notes#v10",
    "relUrl": "/release-notes#v10"
  },"88": {
    "doc": "Integrate",
    "title": "Integrate",
    "content": "Blip was designed from the ground up to integrate with your MySQL environment. To accomplish that, Blip has two mains points of integration: . Plugins Plugins are function callbacks that let you override specific functionality of Blip. Every plugin is optional: if specified, it overrides the built-in functionality. Factories Factories are interfaces that let you override certain object creation of Blip. Every factory is optional: if specified, it overrides the built-in factory. ",
    "url": "/v1.0/integrate",
    "relUrl": "/v1.0/integrate"
  },"89": {
    "doc": "Introduction",
    "title": "Introduction to Blip",
    "content": " ",
    "url": "/v1.0/intro#introduction-to-blip",
    "relUrl": "/v1.0/intro#introduction-to-blip"
  },"90": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/v1.0/intro",
    "relUrl": "/v1.0/intro"
  },"91": {
    "doc": "Laptop",
    "title": "Laptop",
    "content": "Presuming a standard MySQL insstance runs on your laptop, first create a blip user: . CREATE USER IF NOT EXISTS 'blip' IDENTIFIED BY ''; -- no password GRANT SELECT ON `performance_schema`.* TO 'blip'@'%'; -- no privlieges . Then run blip (after compiling it in bin/blip/, of course): . $ blip . By default, Blip automatically finds local MySQL instances, and tries a few default username-password combinations. If successful, it will dump metrics to STDOUT. If not successful, run with --debug. ",
    "url": "/v1.0/quick-start/laptop.html",
    "relUrl": "/v1.0/quick-start/laptop.html"
  },"92": {
    "doc": "Level Plan Adjuster",
    "title": "Level Plan Adjuster",
    "content": " ",
    "url": "/v1.0/monitor/level-adjuster.html",
    "relUrl": "/v1.0/monitor/level-adjuster.html"
  },"93": {
    "doc": "Level Plan Adjuster",
    "title": "Connection States",
    "content": "| State | Connected to MySQL | Collecting Metrics | Description | . | offline | no | no | Completely offline, no connection to MySQL | . | standby | YES | YES | Connected to MySQL but HA passive mode | . | read-only | YES | YES | MySQL is read-only | . | active | YES | YES | MySQL is writable | . When HA is disabled, standby state is not used. ",
    "url": "/v1.0/monitor/level-adjuster.html#connection-states",
    "relUrl": "/v1.0/monitor/level-adjuster.html#connection-states"
  },"94": {
    "doc": "Level Plan Collector",
    "title": "Level Plan Collector",
    "content": " ",
    "url": "/v1.0/monitor/level-collector.html",
    "relUrl": "/v1.0/monitor/level-collector.html"
  },"95": {
    "doc": "Metrics",
    "title": "Metrics",
    "content": " ",
    "url": "/v1.0/metrics",
    "relUrl": "/v1.0/metrics"
  },"96": {
    "doc": "Monitor Loader",
    "title": "Monitor Loader",
    "content": " ",
    "url": "/v1.0/server/monitor-loader.html",
    "relUrl": "/v1.0/server/monitor-loader.html"
  },"97": {
    "doc": "Monitor Loader",
    "title": "Auto Reloading",
    "content": " ",
    "url": "/v1.0/server/monitor-loader.html#auto-reloading",
    "relUrl": "/v1.0/server/monitor-loader.html#auto-reloading"
  },"98": {
    "doc": "Monitor Loader",
    "title": "Stop-loss",
    "content": "Stop-loss is a feature of auto reloading that prevents Bip from dropping too many MySQL instances due to unrelated external issues. ",
    "url": "/v1.0/server/monitor-loader.html#stop-loss",
    "relUrl": "/v1.0/server/monitor-loader.html#stop-loss"
  },"99": {
    "doc": "Monitor",
    "title": "Monitor",
    "content": " ",
    "url": "/v1.0/monitor",
    "relUrl": "/v1.0/monitor"
  },"100": {
    "doc": "Monitors",
    "title": "Monitors",
    "content": "Every MySQL instance that Blip monitors is called a moniotr. For simplicity, the terms monitor and MySQL instance are synonymous because a monitor requires and represents only one MySQL instance. But there is more to a monitor than its MySQL instance. NOTE: Monitor and MySQL instance are synonymous in Blip. Monitors are usually specififed in the Blip config file, but they can be loaded various ways—more on this later. For now, it’s only necessary to know that monitors are listed in the YAML config file under the aptly named section moniotrs. The most basic Blip monitor is a simple hostname, username, and password: . monitors: - hostname: 127.0.0.1 username: blip password: aStrongRandomPassword . Or, if you want to use a my.cnf file: . monitors: - mycnf: ${HOME}/.my.cnf . A single Blip instances can monitor any number of MySQL instances. Here is a snippet of config that specifies three different MySQL instances: . monitors: - socket: /tmp/mysql.sock username: blip password-file: /dev/shm/metrics-password - hostname: 10.1.1.53 username: metrics password: foo - hostname: db3.us-east-1.amazonaws.com aws-rds: auth-token: true . The first instance is local: Blip connects using socket file /tmp/mysql.sock. The second instance is remote: Blip connects to IP 10.1.1.53. The third instance is an Amazon RDS for MySQL instance, and Blip uses IAM authentication. The point of these contrived examples is: Blip can monitor any MySQL instance anywhere it’s running. (If you have a case where this is not true, please file an issue.) . By default, Blip first attempts to load monitors from its config file (which is blip.yaml in the current working directory, by default). But the config file can specify other ways to load monitors: . monitor-loader: freq: 60s files: [monitors1.yaml, monitors2.yaml] . In short, that config snippet makes Blip load (read) monitor configuration from files monitors1.yaml and monitors2.yaml every 60 seconds. (Blip can dynamically load [add] and unload [remove] monitors while running.) The monitor-load config is optional; by default, Blip loads monitors from the monitors section in its config file. To further ensure that Blip can monitory any MySQL instance, loading monitors is an optional plugin with this callback signature: . LoadMonitors func(Config) ([]ConfigMonitor, error) . Hopefully, bilt-in features cover every use case, but if you have particular requirements (filtering out certain MySQL instances, for example), you can plug in your own code to load monitors. In addition to basic MySQL configuration—how to connect to MySQL: hostname, username, and password, and so forth—monitors have other optional features and configuration, summarized briefly in the following table. | Monitor Confg | Feature | . | aws | Amazon RDS authentication | . | exporter | Prometheus mysqld_exporter emulation | . | ha | High availability (not implemented yet) | . | heartbeat | Heartbeat to measure replication lag | . | meta | User-defined key-value data | . | plans | Monitor-specific plans for metrics collection | . | sinks | Monitors-specific sinks for sending metrics | . | tags | Monitor-specific key-value data passed to sinks | . | tls | TLS configuration | . That’s a lot of information, but the point is a lot simpler: Blip monitors can do almost anything. For the most part, these features support Blip in large, automated environments. If you don’t need a feature, you can forget about it: Blip is simple (and fully automatic) by default. When you need a feature, Blip most likely already supports it. One last helpful tip: . $ blip --print-moniotrs --run=false . The command line above starts (but does not run) Blip so that it loads monitors and prints them, then exists. This can help debug monitor loading and configuration. Keep learning: Plans ↓ . ",
    "url": "/v1.0/intro/monitors.html",
    "relUrl": "/v1.0/intro/monitors.html"
  },"101": {
    "doc": "Plan Loader",
    "title": "Plan Loader",
    "content": " ",
    "url": "/v1.0/server/plan-loader.html",
    "relUrl": "/v1.0/server/plan-loader.html"
  },"102": {
    "doc": "Plan Loader",
    "title": "Load Order",
    "content": "--- # Zero config #plans: #default: blip plans: files: first.yaml plans: files: [first.yaml,second.yaml] #default: first.yaml plans: files: [first.yaml,second.yaml] default: second.yaml plans: files: [first.yaml,second.yaml] adjust: freq: 1s readonly: first.yaml active: second.yaml plans: files: first.yaml:second.yaml default: first.yaml adjust: # ERROR: default and adjust mutually exclusive freq: 1s readonly: first.yaml active: second.yaml plans: files: first.yaml:second.yaml table: blip.plans plans: table: blip.plans # WHERE 1=1 (all rows) #default: WHERE monitorId IS NULL ORDER BY name ASC LIMIT 1 plans: table: blip.plans default: plan1 monitors: - id: host1 plans: table: blip.plans # WHERE monitorId=host1 #default: WHERE monitorId=host1 ORDER BY name ASC LIMIT 1 . ",
    "url": "/v1.0/server/plan-loader.html#load-order",
    "relUrl": "/v1.0/server/plan-loader.html#load-order"
  },"103": {
    "doc": "Plan Loader",
    "title": "Combining Levels",
    "content": "Levels are combined by the LPC (call stack): . sortedLevels() changePlan() . ",
    "url": "/v1.0/server/plan-loader.html#combining-levels",
    "relUrl": "/v1.0/server/plan-loader.html#combining-levels"
  },"104": {
    "doc": "Plans",
    "title": "Plans",
    "content": " ",
    "url": "/v1.0/plans",
    "relUrl": "/v1.0/plans"
  },"105": {
    "doc": "Plans",
    "title": "Plans",
    "content": "A level plan (or plan for short) configures which metrics to collect. Plans solve three problems: . | Which metrics to collect? | How to collect those metrics? | How often to collect those metrics? | . The first problem arises because there are over 1,000 MySQL metrics but 0 standards for which metrics to collect. Some engineers collect nearly all metrics and use what they need in graphs. Some engineers collect as few metrics as possible due to costs. Some engineers don’t know what to collect, relying on monitor defaults to be useful. Plans help solve the first problem by not hard-coding which metcis to collect. Write a plan to collect only the metrics you need. Blip has a built-in default plan that collects more than 60 of the most important MySQL metrics, which might be all you need. The second problem arises because there are many versions and distributions of MySQL, which makes some metrics a moving target. For example: where do you collect a MySQL replication lag metric? The oldest and perhaps still most common source is Seconds_Behind_Master in the SHOW SLAVE STATUS output. But those two changed to Seconds_Behind_Source and SHOW REPLICA STATUS, respectively. And what if you don’t use those and, instead, use pt-heartbeat or the Blip built-in heartbeat? Or what if you’re running MySQL Group Replication? Or what if you run MySQL in the cloud and the cloud provider emits its own replication lag metric? . Plans help solve the second problem by using metric domains (or domains for short) to name logically-related group of MySQL metrics. Probably the most well known group is SHOW GLOBAL STATUS, to which Blip gives the domain name status.global. A replication lag metric is scoped within the repl domain (short for “replication”), which hides (abstarcts way) the technical details of how it’s collected. When you write a plan that collects replication lag, the plan works everywhere because domains specify which metrics to collect, not necessarily how to collect them. The third problem arises from cost and storage limits: if everything was fast and free, you would collect all metrics every 1 second. But this is (almost) never done because it requires signfiicant storage and processing, which lead to significant costs. Instead, the norm is collecting all metrics every 10, 20, or 30 seconds. But even 10 seconds is too long for a busy database because, for example, at only 5,000 QPS, that resolution averages out the metrics for 50,000 queries. Plans help solve the third problem by allowing you to collect different metrics at different frequencies—which is the “level” in the full term: “level plan”. It helps to remember as: “Higher the level, higher the wait (time between collection).” For example, imagine three levels as shown below. Level 1, the base level, is collected frqeuently (shortest wait time): every 5 seconds. Level 2 is collected less frequently: every 20 seconds. Level 3, the highest level, is collected the most infrequently (longest wait time): every 30 seconds. Blip automatically combines levels when they overlap and collects all metrics at that time. At 20 seconds (since Blip started collecting metrics for this plan), Blip collects metrics for both levels 1 and 2 because 20 mod 5 = 0 and 20 mod 20 = 0, respectively. At 30 seconds, Blip collects metrics for both levels 1 anbd 3 because 30 mod 5 = 0 and 30 mod 20 = 0, respectively. And at 60 seconds, Blip collecgts metrics for all three levels because 60 mod freq = 0. Blip plans can do more, but for this introduction it’s sufficient to know that they allow you to fine-tune metrics collection, which increases the quality of monitoring while reducing costs. Keep going: Quick Start ↓ . ",
    "url": "/v1.0/intro/plans.html",
    "relUrl": "/v1.0/intro/plans.html"
  },"106": {
    "doc": "Prometheus",
    "title": "Prometheus",
    "content": "Blip can emulate Prometheus mysqld_exporter. ",
    "url": "/v1.0/prometheus",
    "relUrl": "/v1.0/prometheus"
  },"107": {
    "doc": "Quick Reference",
    "title": "Quick Reference",
    "content": "Interpolation . ${ENV_VAR} %{monitor.hostname} . Plan File . Following is a full Blip config file (YAML syntax). This is only a reference to show all configuration variables. --- level: freq: 5s collect: status.global: metrics: - queries status.host: options: host: 10.1.1.1 metrics: - threads_running query.global: options: response_time_percentiles: \"p95,p99,p999\" metrics: - response_time var: options: opt_1: value_1 opt_N: value_N metrics: - metric_1 - metric_N level_N: freq: 10s collect: domain_1: options: opt_1: value_1 opt_N: value_N metrics: - metric_1 - metric_N . ",
    "url": "/v1.0/plans/quick-ref.html",
    "relUrl": "/v1.0/plans/quick-ref.html"
  },"108": {
    "doc": "Quick Reference",
    "title": "Quick Reference",
    "content": "The following are quick references, not complete or valid examples. See Config File for details. Interpolation . ${ENV_VAR} %{monitor.hostname} . Config File . --- # --------------------------------------------------------------------------- # Blip server # --------------------------------------------------------------------------- api: bind: 127.1:7090 disable: false monitor-loader: freq: 60s files: [one.yaml, two.yaml] stop-loss: 50% aws: regions: [\"auto\",\"us-east-1\"] local: disable-auto: true disable-auto-root: true strict: true # --------------------------------------------------------------------------- # Defaults for monitors # --------------------------------------------------------------------------- aws-rds: iam-auth-token: true password-secret: \"arn::::\" region: \"us-east-1\" disable-auto-region: false disable-auto-tls: false exporter: mode: dual|legacy flags: web.listen-address: :9001 heartbeat: freq: 1s table: blip.heartbeat mysql: mycnf: my.cnf username: blip password: blip password-file: \"\" timeout-connect: 5s plans: files: - none.yaml - ro-plan.yaml - active-plan.yaml table: blip.plans monitor: &lt;monitor&gt; adjust: offline: after: 1s plan: none.yaml standby: after: 1s plan: none.yaml read-only: after: 1s plan: ro-plan.yaml active: after: 1s plan: active-plan.yaml sinks: chronosphere: url: \"http://127.0.0.1:3030/openmetrics/write\" signalfx: auth-token: \"\" auth-token-file: \"\" log: # No options tags: env: ${ENVIRONMENT:-dev} dc: ${DATACENTER:-local} hostname: %{monitor.hostname} tls: ca: local.ca cert: /secrets/$%{monitor.hostname}.crt key: /secrets/%{monitor.hostname}.key # --------------------------------------------------------------------------- # MySQL instances to monitor # --------------------------------------------------------------------------- monitors: - id: host1 # mysql: hostname: host1.local socket: /tmp/mysql.sock mycnf: my.cnf username: metrics password: foo password-file: /dev/shm/mypasswd timeout-connect: 5s aws-rds: password-secret: \"arn::::\" iam-auth-token: true exporter: mode: dual|legacy flags: \"web.listen-address\": 127.0.0.1:9104 \"web.telemetry-path\": /metrics heartbeat: freq: 1s table: blip.heartbeat ha: # Reserved plans: table: \"blip.plans\" #monitor: &lt;monitor&gt; adjust: readonly: after: 2s plan: ro.yaml active: after: 1s plan: rw.yaml sinks: signalfx: auth-token: \"\" auth-token-file: \"\" log: # No options chronosphere: url: http://127.0.0.1:3030/openmetrics/write tags: env: staging monitor-id: %{monitor.id} tls: ca: my-ca cert: ${SECRETS}/%{monitor.hostname}.cert key: ${SECRETS}/%{monitor.hostname}.key meta: source: host2.local canary: no . ",
    "url": "/v1.0/config/quick-ref.html",
    "relUrl": "/v1.0/config/quick-ref.html"
  },"109": {
    "doc": "Quick Start",
    "title": "Quick Start",
    "content": " ",
    "url": "/v1.0/quick-start",
    "relUrl": "/v1.0/quick-start"
  },"110": {
    "doc": "Scope",
    "title": "Scope",
    "content": "Plans have two scopes: . Shared . Shared plans are scoped to Blip and can be used by any monitor that references them. All plans configured in config.plans and the built-in plans plans are shared. This is the normal case: you define one or more plan (or none, using the built-in Blip plan), and all the monitors use those plans. Since interpolation works in plan files (see File &gt; Interpolation), shared plans can still be tailored to each monitor, if necessary (although it’s usually not necessary). Monitor . Monitor plans are scoped to one monitor and can only be used by that monitor. All plans configured in config.monitor.plans are monitor plans. See [config.plans] . ",
    "url": "/v1.0/plans/scope.html",
    "relUrl": "/v1.0/plans/scope.html"
  },"111": {
    "doc": "Scope",
    "title": "Built-in",
    "content": "Blip . Prometheus mysqld_exporter . ",
    "url": "/v1.0/plans/scope.html#built-in",
    "relUrl": "/v1.0/plans/scope.html#built-in"
  },"112": {
    "doc": "Server",
    "title": "Server",
    "content": " ",
    "url": "/v1.0/server",
    "relUrl": "/v1.0/server"
  },"113": {
    "doc": "Server",
    "title": "Server",
    "content": "Server endpoints return information about the blip instance (the server) and high-level information about monitors. | GET /status | GET /version | . ",
    "url": "/v1.0/api/server.html",
    "relUrl": "/v1.0/api/server.html"
  },"114": {
    "doc": "Server",
    "title": "GET /status",
    "content": "Returns high-level Blip server status. GET . /status . Response . { \"Started\" string // ISO timestamp (UTC) \"Uptime\" int64 // seconds \"MonitorCount\" uint // number of monitors loaded \"Internal\" map[string]string // Blip components \"Version\" string // Blip version } . Response Status Codes . 200: Successful operation. ",
    "url": "/v1.0/api/server.html#get-status",
    "relUrl": "/v1.0/api/server.html#get-status"
  },"115": {
    "doc": "Server",
    "title": "GET /version",
    "content": "Return Bip version. GET . /version . Response . v1.0.75 . Response Status Codes . 200: Successful operation. ",
    "url": "/v1.0/api/server.html#get-version",
    "relUrl": "/v1.0/api/server.html#get-version"
  },"116": {
    "doc": "Sinks",
    "title": "Sinks",
    "content": "NOTE: You can skip this part of the introduction if: . | You use SignalFx, or | You use Chronosphere, or | You plan to use Blip to emulate and replace Prometheus `mysqld_exporter` | . Blip has built-in support for these three use cases. Blip ships with built-in and automatic support for almost everything, but the one thing we (the Blip developers) cannot know is where you (the user) will send metrics. Consequently, you might need to develop a Blip metric sink to translate and send Blip metrics to your metrics store or metrics graphing solution. Don’t worry: Bilp was intentially designed to make this easy. This brief introduction shows the high-level process of developing a new Blip metric sink. The following presumes that you’re an experienced Go programmer. All Blip sinks implement this interface: . type Sink interface { Send(context.Context, *Metrics) error Status() string } . Unsurprisingly, Blip calls the Send method to send metrics. The vast majority of work to implement a new sink is this one method. More on this in a moment. Blip calls the Status method to report real-time status of the sink (along with all other parts in the monitor). The reported status can be anything you think is useful to know; for exmaple, the last error sending metrics (if any). Let’s presume, for a moment, that you have implement a new sink. To allow Blip to make (instantiate) that sink, you implement one last interface: . type SinkFactory interface { Make(name, monitorId string, opts, tags map[string]string) (Sink, error) } . When a monitor uses your sink, Blip calls your sink factory to make a new sink for the monitor. Blip passes to your factory: . | Sink name (which is slightly redundant, but nobody is perfect) | Monitor ID (all monitors have a unique ID for status, logging, and so forth”) | Options (from the monitor config) | Tags (from the monitor config) | . Options are sink-specific options; for example, an API token is common for authenticating to hosted metrics soltuions. Tags describe the metrics; some metrics solutions calls these “dimensions”, others call them “labels”—Blip calls them “tags”. Options are tags are set in the monitor config, which you’ll learn more about later. Here’s a mock (incomplete and nonfunctional) implementation of a sink (called “Kim” for an engineer who left us [the Blip developers] to join a metrics solution startup) and sink factory, just to give you an idea: . import ( \"context\" \"github.com/cashapp/blip\" ) type Kim struct { tags map[string]string client Client // sink-specific client } func NewKim(monitorId string, opts, tags map[string]string) *Kim { return &amp;Kim{ tags: tags, client: NewClient(opts[\"addr\"], opts[\"api-token\"]), } } func (k *Kim) Send(cxt context.Context, metrics *blip.Metrics) error { // Metrics are grouped by/keyed on domain name for domain := range metrics { // Loop through metrics in each domain for i := range metrics[domain] { m := metrics[domain][i] // Name: m.Name (string) // Value: m.Value (float64) // Type: m.Type (const byte) // Transform Blip metrics to sink-specific struct/protocol } } // Send sink-specific struct/protocol (km) return k.client.Send(ctx, km) } func (k *Kim) Status() string { return \"I miss where I used to work\" } // -------------------------------------------------------------------------- type KimFactory struct{} func (f KimFactory) Make(name, monitorId string, opts, tags map[string]string) (blip.Sink, error) { k := NewKim(monitorId, opts, tags) return k, nil } . For real sinks, see the built-in Blip sinks: blip/sinks. Once your implementation is done, you register the sink with Blip: . sink.Register(\"kim\", KimFactory{}) . More on this later; for now, the point is that you register your sink with a given name (“kim”), and that name is important because it’s what you specify in a monitor config to make Blip instantiate the sink. Following is a snippet of a monitor config that shows how the “kim” sink is used and configured: . monitors: - id: host1 hostname: host1.local sinks: kim: addr: https://local.domain api-token: ABC123 tags: env: staging region: us-east-1 . On line 5, the “kim” sink is specified, and lines 6 and 7 are its options. Lines 9 and 10 are tags for the monitor, which are also passed to the sink when created. Keep learning: Monitors ↓ . ",
    "url": "/v1.0/intro/sinks.html",
    "relUrl": "/v1.0/intro/sinks.html"
  },"117": {
    "doc": "Sinks",
    "title": "Metric Sinks",
    "content": " ",
    "url": "/v1.0/metrics/sinks.html#metric-sinks",
    "relUrl": "/v1.0/metrics/sinks.html#metric-sinks"
  },"118": {
    "doc": "Sinks",
    "title": "Built-in",
    "content": "Chronosphere . sinks: chronosphere: url: \"http://127.0.0.1:3030/openmetrics/write\" . Defaults should work presuming a local Chronocollector is running; else, set url option to address of Chronocollector. Reports all tags as Prometheus labels. Reports Prometheus-style metric names: mysql_status_threads_running instead of status.global.threads_running. SignalFx . sinks: signalfx: auth-token: \"\" auth-token-file: \"\" . Must provide auth-token or auth-token-file in config. Reports all tags as dimensions. Reports domain-qualified metric names: status.global.threads_running. ",
    "url": "/v1.0/metrics/sinks.html#built-in",
    "relUrl": "/v1.0/metrics/sinks.html#built-in"
  },"119": {
    "doc": "Sinks",
    "title": "Custom",
    "content": " ",
    "url": "/v1.0/metrics/sinks.html#custom",
    "relUrl": "/v1.0/metrics/sinks.html#custom"
  },"120": {
    "doc": "Sinks",
    "title": "Sinks",
    "content": " ",
    "url": "/v1.0/metrics/sinks.html",
    "relUrl": "/v1.0/metrics/sinks.html"
  },"121": {
    "doc": "Table",
    "title": "Plan Table",
    "content": "CREATE TABLE plans ( name varchar(100) not null, levels blob not null monitor_id varchar(1000) null default null PRIMARY KEY (name), INDEX (monitorId) ) . -- Defalut single state plan (DSSP) (\"default\", \"{...}\", NULL) -- Default multi-state plans (\"readonly\", \"{...}\", NULL) (\"active\", \"{...}\", NULL) -- Per-moitor single state plans (\"mon1\", \"{...}\", \"mon1\") (\"mon2\", \"{...}\", \"mon2\") -- Mixed plans (\"default\", \"{...}\", NULL) (\"mon1-ro\", \"{...}\", \"mon1\") (\"mon1-rw\", \"{...}\", \"mon1\") (\"mon2\", \"{...}\", \"mon2\") -- mon3 uses default plan . ",
    "url": "/v1.0/plans/table.html#plan-table",
    "relUrl": "/v1.0/plans/table.html#plan-table"
  },"122": {
    "doc": "Table",
    "title": "Table",
    "content": " ",
    "url": "/v1.0/plans/table.html",
    "relUrl": "/v1.0/plans/table.html"
  }
}
